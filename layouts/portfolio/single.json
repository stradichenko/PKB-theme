{{- /* File: layouts/portfolio/single.json */ -}}
{{- $supportedFormats := slice "jpg" "jpeg" "png" "webp" "gif" "tiff" "tif" -}}
{{- $portfolioImages := slice -}}

{{- $resources := slice -}}
{{- with .Resources }}
  {{- $resources = . -}}
{{- else }}
  {{- $resources = resources.Match "images/portfolio/**" -}}
{{- end -}}

{{- range $image := $resources -}}
  {{- $ext := lower (path.Ext $image.RelPermalink) -}}
  {{- $cleanExt := strings.TrimLeft "." $ext -}}
  {{- if in $supportedFormats $cleanExt -}}

    {{- $pathParts := split (strings.TrimPrefix "/images/portfolio/" $image.RelPermalink) "/" -}}
    {{- $category := "general" -}}
    {{- if gt (len $pathParts) 1 -}}
      {{- $category = index $pathParts 0 -}}
    {{- end -}}

    {{- $imageData := dict
      "pkb_image_id" (printf "%s_%s" $category (path.BaseName $image.RelPermalink))
      "pkb_category" $category
      "pkb_filename" (path.Base $image.RelPermalink)
      "pkb_original_width" $image.Width
      "pkb_original_height" $image.Height
      "pkb_file_size" (len $image.Content)
      "pkb_format" $cleanExt
      "pkb_permalink" $image.Permalink
      "pkb_rel_permalink" $image.RelPermalink
    -}}

    {{- with $image.Exif -}}
      {{- $exif := dict
        "pkb_exif_make" (.Tags.Make | default "")
        "pkb_exif_model" (.Tags.Model | default "")
        "pkb_exif_lens_model" (.Tags.LensModel | default "")
        "pkb_exif_exposure_time" (.Tags.ExposureTime | default "")
        "pkb_exif_f_number" (.Tags.FNumber | default "")
        "pkb_exif_iso" (.Tags.ISOSpeedRatings | default "")
      -}}
      {{- with .Date -}}
        {{- $exif = merge $exif (dict "pkb_exif_date" (.Format "2006-01-02T15:04:05Z07:00")) -}}
      {{- end -}}
      {{- $imageData = merge $imageData $exif -}}
    {{- end -}}

    {{- /* Reduced thumbnails - only one size for grid view */ -}}
    {{- $thumbnail := $image.Fill "300x300 Smart q75 webp" -}}
    {{- $imageData = merge $imageData (dict
      "pkb_thumbnail_300_300" (dict
        "url" $thumbnail.RelPermalink
        "width" $thumbnail.Width
        "height" $thumbnail.Height
      )
    ) -}}

    {{- /* Single optimized version for overlay */ -}}
    {{- $optimized := $image.Fit "1200x800 q80 webp" -}}
    {{- $imageData = merge $imageData (dict
      "pkb_optimized" (dict
        "url" $optimized.RelPermalink
        "width" $optimized.Width
        "height" $optimized.Height
      )
    ) -}}

    {{- /* Aspect Ratio & Orientation */ -}}
    {{- $aspectRatio := div (float $image.Width) (float $image.Height) -}}
    {{- $orientation := cond (gt $aspectRatio 1.05) "landscape" (cond (lt $aspectRatio 0.95) "portrait" "square") -}}
    {{- $imageData = merge $imageData (dict
      "pkb_aspect_ratio" $aspectRatio
      "pkb_orientation" $orientation
    ) -}}

    {{- /* Simplified color analysis - much faster */ -}}
    {{- $colorSample := $image.Fit "8x8" -}}
    {{- $colors := first 3 $colorSample.Colors -}}
    {{- $dominantColors := slice -}}
    {{- $colorFamilies := slice -}}
    
    {{- range $colors }}
      {{- $hex := .String -}}
      {{- $dominantColors = $dominantColors | append $hex -}}
      {{- /* Simple color family classification using hex values */ -}}
      {{- $hexClean := strings.TrimPrefix $hex "#" -}}
      {{- if eq (len $hexClean) 6 -}}
        {{- $rHex := substr $hexClean 0 2 -}}
        {{- $gHex := substr $hexClean 2 2 -}}
        {{- $bHex := substr $hexClean 4 2 -}}
        {{- /* Simple heuristic color classification */ -}}
        {{- $family := "gray" -}}
        {{- if or (strings.HasPrefix $hexClean "f") (strings.HasPrefix $hexClean "e") -}}
          {{- $family = "white" -}}
        {{- else if or (strings.HasPrefix $hexClean "0") (strings.HasPrefix $hexClean "1") (strings.HasPrefix $hexClean "2") -}}
          {{- $family = "black" -}}
        {{- else if gt $rHex $gHex -}}
          {{- if gt $rHex $bHex -}}
            {{- $family = "red" -}}
          {{- end -}}
        {{- else if gt $gHex $rHex -}}
          {{- if gt $gHex $bHex -}}
            {{- $family = "green" -}}
          {{- end -}}
        {{- else if gt $bHex $rHex -}}
          {{- if gt $bHex $gHex -}}
            {{- $family = "blue" -}}
          {{- end -}}
        {{- end -}}
        {{- if not (in $colorFamilies $family) -}}
          {{- $colorFamilies = $colorFamilies | append $family -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}

    {{- $imageData = merge $imageData (dict
      "pkb_dominant_colors" $dominantColors
      "pkb_color_families" $colorFamilies
    ) -}}

    {{- $imageData = merge $imageData (dict
      "pkb_processed_at" (now.Format "2006-01-02T15:04:05Z07:00")
    ) -}}

    {{- $portfolioImages = $portfolioImages | append $imageData -}}
  {{- end -}}
{{- end -}}

{{- $categoryList := slice -}}
{{- range $portfolioImages }}
  {{- $cat := .pkb_category | default "uncategorized" -}}
  {{- if not (in $categoryList $cat) }}
    {{- $categoryList = $categoryList | append $cat -}}
  {{- end -}}
{{- end -}}

{{- dict
  "portfolio_metadata" (dict
    "total_images" (len $portfolioImages)
    "supported_formats" $supportedFormats
    "generated_at" (now.Format "2006-01-02T15:04:05Z07:00")
    "hugo_version" hugo.Version
    "pkb_schema_version" "1.0.0"
    "category_list" $categoryList
  )
  "images" $portfolioImages
| jsonify -}}
