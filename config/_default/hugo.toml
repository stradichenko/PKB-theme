baseURL = 'https://example.org/'
languageCode = 'en-us'
title = 'HUGO_site'

enableGitInfo = true
#relativeURLs = true
#canonifyURLs = true

[HTTPCache]
  [HTTPCache.cache]
    [HTTPCache.cache.for]
      excludes = ['**']
      includes = []

[build]
  noJSConfigInAssets = false
  useResourceCacheWhen = 'fallback'
  [build.buildStats]
    disableClasses = false
    disableIDs = false
    disableTags = false
    enable = false
  [[build.cacheBusters]]
    source = '(postcss|tailwind)\.config\.js'
    target = '(css|styles|scss|sass)'

  writeStats = true #Generates build statistics and dependency information Creates hugo_stats.json file in your project root. Contains information about HTML classes, IDs, and tags used across your site

[caches]
  [caches.assets]
    dir = ":resourceDir/_gen"
    maxAge = "1h"
  
  [caches.getcsv]
    maxAge = "10s"
  
  [caches.getjson]
    maxAge = "10s"
  
  [caches.getresource]
    maxAge = "1h"
  
  [caches.images]
    dir = ":resourceDir/_gen"
    maxAge = "1h"
  
  [caches.modules]
    dir = ":cacheDir/modules"
    maxAge = "1h"

[cascade]

[contentTypes]

[deployment]
  confirm = false
  dryRun = false
  force = false
  invalidateCDN = true
  maxDeletes = 256
  target = ''
  workers = 10

[frontmatter]
  date = ['date', 'publishdate', 'pubdate', 'published', 'lastmod', 'modified']
  expiryDate = ['expirydate', 'unpublishdate']
  lastmod = [':git', 'lastmod', 'modified', 'date', 'publishdate', 'pubdate', 'published']
  publishDate = ['publishdate', 'pubdate', 'published', 'date']

ignoreFiles = [ "\\.qmd$", "\\.ipynb$", "\\.py$" ]
enableEmoji = true
enableRobotsTXT = true


[imaging]
  anchor = 'Smart'
  bgColor = '#ffffff'
  hint = 'photo'
  quality = 85
  resampleFilter = 'Lanczos'
  # Add EXIF processing options
  [imaging.exif]
    includeFields = "DateTimeOriginal|Make|Model|LensModel|ExposureTime|FNumber|ISOSpeedRatings" #  includeFields = ".*" 
    excludeFields = ""
    disableDate = false
    disableLatLong = true # disableLatLong = false

[markup]
  [markup.goldmark]
    [markup.goldmark.renderHooks]
      [markup.goldmark.renderHooks.image]
        enableDefault = true
      [markup.goldmark.renderHooks.link]
        enableDefault = true
    [markup.goldmark.renderer]
      unsafe = true  # This allows raw HTML in markdown files
    [markup.goldmark.parser]
      [markup.goldmark.parser.attribute]
        block = true
        title = true

[mediaTypes]
  [mediaTypes.'application/json']
    delimiter = '.'
    suffixes = ['json']
  [mediaTypes.'application/manifest+json']
    delimiter = '.'
    suffixes = ['webmanifest']
  [mediaTypes.'application/octet-stream']
    delimiter = '.'
  [mediaTypes.'application/pdf']
    delimiter = '.'
    suffixes = ['pdf']
  [mediaTypes.'application/rss+xml']
    delimiter = '.'
    suffixes = ['xml', 'rss']
  [mediaTypes.'application/toml']
    delimiter = '.'
    suffixes = ['toml']
  [mediaTypes.'application/wasm']
    delimiter = '.'
    suffixes = ['wasm']
  [mediaTypes.'application/xml']
    delimiter = '.'
    suffixes = ['xml']
  [mediaTypes.'application/yaml']
    delimiter = '.'
    suffixes = ['yaml', 'yml']
  [mediaTypes.'font/otf']
    delimiter = '.'
    suffixes = ['otf']
  [mediaTypes.'font/ttf']
    delimiter = '.'
    suffixes = ['ttf']
  [mediaTypes.'image/bmp']
    delimiter = '.'
    suffixes = ['bmp']
  [mediaTypes.'image/gif']
    delimiter = '.'
    suffixes = ['gif']
  [mediaTypes.'image/jpeg']
    delimiter = '.'
    suffixes = ['jpg', 'jpeg', 'jpe', 'jif', 'jfif']
  [mediaTypes.'image/png']
    delimiter = '.'
    suffixes = ['png']
  [mediaTypes.'image/svg+xml']
    delimiter = '.'
    suffixes = ['svg']
  [mediaTypes.'image/tiff']
    delimiter = '.'
    suffixes = ['tif', 'tiff']
  [mediaTypes.'image/webp']
    delimiter = '.'
    suffixes = ['webp']
  [mediaTypes.'text/asciidoc']
    delimiter = '.'
    suffixes = ['adoc', 'asciidoc', 'ad']
  [mediaTypes.'text/calendar']
    delimiter = '.'
    suffixes = ['ics']
  [mediaTypes.'text/css']
    delimiter = '.'
    suffixes = ['css']
  [mediaTypes.'text/csv']
    delimiter = '.'
    suffixes = ['csv']
  [mediaTypes.'text/html']
    delimiter = '.'
    suffixes = ['html', 'htm']
  [mediaTypes.'text/javascript']
    delimiter = '.'
    suffixes = ['js', 'jsm', 'mjs']
  [mediaTypes.'text/jsx']
    delimiter = '.'
    suffixes = ['jsx']
  [mediaTypes.'text/markdown']
    delimiter = '.'
    suffixes = ['md', 'mdown', 'markdown']
  [mediaTypes.'text/org']
    delimiter = '.'
    suffixes = ['org']
  [mediaTypes.'text/pandoc']
    delimiter = '.'
    suffixes = ['pandoc', 'pdc']
  [mediaTypes.'text/plain']
    delimiter = '.'
    suffixes = ['txt']
  [mediaTypes.'text/rst']
    delimiter = '.'
    suffixes = ['rst']
  [mediaTypes.'text/tsx']
    delimiter = '.'
    suffixes = ['tsx']
  [mediaTypes.'text/typescript']
    delimiter = '.'
    suffixes = ['ts']
  [mediaTypes.'text/x-sass']
    delimiter = '.'
    suffixes = ['sass']
  [mediaTypes.'text/x-scss']
    delimiter = '.'
    suffixes = ['scss']
  [mediaTypes.'video/3gpp']
    delimiter = '.'
    suffixes = ['3gpp', '3gp']
  [mediaTypes.'video/mp4']
    delimiter = '.'
    suffixes = ['mp4']
  [mediaTypes.'video/mpeg']
    delimiter = '.'
    suffixes = ['mpg', 'mpeg']
  [mediaTypes.'video/ogg']
    delimiter = '.'
    suffixes = ['ogv']
  [mediaTypes.'video/webm']
    delimiter = '.'
    suffixes = ['webm']
  [mediaTypes.'video/x-msvideo']
    delimiter = '.'
    suffixes = ['avi']

[minify]
  disableCSS = false
  disableHTML = false
  disableJS = false
  disableJSON = false
  disableSVG = false
  disableXML = false
  minifyOutput = true
  [minify.tdewolff]
    [minify.tdewolff.css]
      inline = false
      keepCSS2 = true
      precision = 0
    [minify.tdewolff.html]
      keepComments = false
      keepConditionalComments = false
      keepDefaultAttrVals = true
      keepDocumentTags = true
      keepEndTags = true
      keepQuotes = false
      keepSpecialComments = true
      keepWhitespace = false
      templateDelims = ['', '']
    [minify.tdewolff.js]
      keepVarNames = false
      precision = 0
      version = 2022
    [minify.tdewolff.json]
      keepNumbers = false
      precision = 0
    [minify.tdewolff.svg]
      inline = false
      keepComments = false
      precision = 0
    [minify.tdewolff.xml]
      keepWhitespace = false


[outputFormats]
  [outputFormats.amp]
    baseName = 'index'
    isHTML = true
    isPlainText = false
    mediaType = 'text/html'
    noUgly = false
    notAlternative = false
    path = 'amp'
    permalinkable = true
    protocol = ''
    rel = 'amphtml'
    root = false
    ugly = false
    weight = 0
  [outputFormats.calendar]
    baseName = 'index'
    isHTML = false
    isPlainText = true
    mediaType = 'text/calendar'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = 'webcal://'
    rel = 'alternate'
    root = false
    ugly = false
    weight = 0
  [outputFormats.css]
    baseName = 'styles'
    isHTML = false
    isPlainText = true
    mediaType = 'text/css'
    noUgly = false
    notAlternative = true
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'stylesheet'
    root = false
    ugly = false
    weight = 0
  [outputFormats.csv]
    baseName = 'index'
    isHTML = false
    isPlainText = true
    mediaType = 'text/csv'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = false
    ugly = false
    weight = 0
  [outputFormats.html]
    baseName = 'index'
    isHTML = true
    isPlainText = false
    mediaType = 'text/html'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = true
    protocol = ''
    rel = 'canonical'
    root = false
    ugly = false
    weight = 10
  [outputFormats.json]
    baseName = 'index'
    isHTML = false
    isPlainText = true
    mediaType = 'application/json'
    noUgly = false
    notAlternative = true
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = false
    ugly = false
    weight = 0
  [outputFormats.markdown]
    baseName = 'index'
    isHTML = false
    isPlainText = true
    mediaType = 'text/markdown'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = false
    ugly = false
    weight = 0
  [outputFormats.robots]
    baseName = 'robots'
    isHTML = false
    isPlainText = true
    mediaType = 'text/plain'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = true
    ugly = false
    weight = 0
  [outputFormats.rss]
    baseName = 'index'
    isHTML = false
    isPlainText = false
    mediaType = 'application/rss+xml'
    noUgly = true
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = false
    ugly = false
    weight = 0
  [outputFormats.sitemap]
    baseName = 'sitemap'
    isHTML = false
    isPlainText = false
    mediaType = 'application/xml'
    noUgly = false
    notAlternative = false
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'sitemap'
    root = false
    ugly = true
    weight = 0
  [outputFormats.webappmanifest]
    baseName = 'manifest'
    isHTML = false
    isPlainText = true
    mediaType = 'application/manifest+json'
    noUgly = false
    notAlternative = true
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'manifest'
    root = false
    ugly = false
    weight = 0
  [outputFormats.headers]
    baseName = '_headers'
    isHTML = false
    isPlainText = true
    mediaType = 'text/plain'
    noUgly = false
    notAlternative = true
    path = ''
    permalinkable = false
    protocol = ''
    rel = 'alternate'
    root = true
    ugly = false
    weight = 0

[outputs]
  # JSON output is required for search functionality
  # The search index (/index.json) includes only pages from sections defined in params.taxonomies.mainSections
  home = ['HTML', 'RSS', 'JSON', 'headers']
  page = ['HTML', 'JSON'] # needed for portfolio.json
  rss = ['RSS']
  section = ['HTML', 'RSS', 'JSON']
  taxonomy = ['HTML', 'RSS', 'JSON']
  term = ['HTML', 'RSS']


[permalinks]
  [permalinks.page]
  [permalinks.section]
  [permalinks.taxonomy]
  [permalinks.term]

[privacy]
  [privacy.disqus]
    disable = false
  [privacy.googleAnalytics]
    disable = false
    respectDoNotTrack = false
  [privacy.instagram]
    disable = false
    simple = false
  [privacy.twitter]
    disable = false
    enableDNT = false
    simple = false
  [privacy.vimeo]
    disable = false
    enableDNT = false
    simple = false
  [privacy.x]
    disable = false
    enableDNT = false
    simple = false
  [privacy.youTube]
    disable = false
    privacyEnhanced = false

[related]
  includeNewer = false
  threshold = 80
  toLower = false
  [[related.indices]]
    applyFilter = false
    cardinalityThreshold = 0
    name = 'keywords'
    pattern = ''
    toLower = false
    type = 'basic'
    weight = 100
  [[related.indices]]
    applyFilter = false
    cardinalityThreshold = 0
    name = 'date'
    pattern = ''
    toLower = false
    type = 'basic'
    weight = 10
  [[related.indices]]
    applyFilter = false
    cardinalityThreshold = 0
    name = 'tags'
    pattern = ''
    toLower = false
    type = 'basic'
    weight = 80

[security]
  enableInlineShortcodes = false
  [security.exec]
    allow = ['^(dart-)?sass(-embedded)?$', '^go$', '^git$', '^npx$', '^postcss$', '^tailwindcss$']
    osEnv = ['(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG|SYSTEMDRIVE)$']
  [security.funcs]
    getenv = ['^HUGO_', '^CI$']
  [security.http]
    methods = ['(?i)GET|POST']
    urls = ['.*']

[server]
  [[server.redirects]]
    force = false
    from = '/**'
    fromRe = ''
    status = 404
    to = '/404.html'

[services]
  [services.disqus]
    shortname = ''
  [services.googleAnalytics]
    id = ''
  [services.instagram]
    accessToken = ''
    disableInlineCSS = false
  [services.rss]
    limit = -1
  [services.twitter]
    disableInlineCSS = false
  [services.x]
    disableInlineCSS = false

[sitemap]
  changeFreq = 'weekly'
  disable = false
  filename = 'sitemap.xml'
  priority = 0.5

uglyURLs = false